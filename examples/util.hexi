# hexiscript util functions
if catch UTIL_HEXI # Like #ifndef in C
let UTIL_HEXI true

fun toint s
  let n tonum s
  if catch n
    return n
  endif
  return floor n
endfun

fun string_filter s elem
  let out ""
  for let i 0; i < len s; i++
    if s[i] != elem
      let out (out + s[i])
    endif
  endfor
  return out
endfun

fun string_trim s
  let out ""
  for let i 0; i < len s - 1; i++
    if s[i] != ' '; break; endif
  endfor
  for let j len s - 1; j >= 0; j--
    if s[j] != ' '; break; endif
  endfor
  for let k i; k <= j; k++
    let out (out + s[k])
  endfor
  return out
endfun

fun string_compare a b
  let min len a
  if len b < len a; let min len b; endif
  for let i 0; i < min; i++
    if a[i] != b[i]; return a[i] - b[i]; endif
  endfor
  return len a - len b
endfun

fun string_split s delim
  let ret    dict 32
  let l      len s
  let j      0
  let ret[0] ""
  for let i 0; i < l; i++
    if s[i] = delim
      if len ret[j] > 0
        let ret[++j] ""
      endif
      continue
    endif
    let ret[j] (ret[j] + s[i])
  endfor
  return ret
endfun

fun nat_order a b
  if a > b
    return 1
  elif a < b
    return (-1)
  else
    return 0
  endif
endfun

fun rev_order a b
  if a > b
    return (-1)
  elif a < b
    return 1
  else
    return 0
  endif
endfun

fun compare a b; return nat_order a b; endfun

fun dict_copy d
  let n   len d
  let k   keys d
  let cpy dict n
  for let i 0; i < n; i++
    let cpy[k[i]] d[k[i]]
  endfor
  return cpy
endfun

fun dict_print d
  let n len d
  let k keys d
  for let i 0; i < n; i++
    print k[i] + "\t: "
    println d[k[i]]
  endfor
endfun

# Array functions
# Most array functions work with dicts as well
fun array_copy a
  let n   len a
  let cpy arr n
  for let i 0; i < n; i++
    let cpy[i] a[i]
  endfor
  return cpy
endfun

fun array_filter a elem
  let n     len a
  let out   dict n
  let index 0
  for let i 0; i < n; i++
    if a[i] != elem
      let out[index++] a[i]
    endif
  endfor
  return array_copy out
endfun

fun array_fill a elem
  let n len a
  for let i 0; i < n; i++
    let a[i] elem
  endfor
endfun

fun array_print a
  let n len a - 1
  if n < 0
    println "{}"
  else
    print "{"
    for let i 0; i < n; i++
      print tostr a[i] + ", "
    endfor
    println tostr a[n] + "}"
  endif
endfun

# Uses function "compare" to determine ordering
fun array_sort h
  fun sift_down h n index
    while index * 2 + 1 < n
      let child index * 2 + 1
      if child + 1 < n
        if compare h[child] h[child + 1] < 0
          child++
        endif
      endif
      if compare h[index] h[child] < 0
        let tmp       h[index]
        let h[index]  h[child]
        let h[child]  tmp
        let index     child
      else
        break
      endif
    endwhile
  endfun
  let n len h
  # Initialize as heap
  for let i n / 2 - 1; i >= 0; i--
    sift_down h n i
  endfor
  # Poll elements until empty
  while n > 0
    let tmp  h[0]
    let h[0] h[--n]
    let h[n] tmp
    sift_down h n 0
  endwhile
endfun

# Heap functions
# Uses function "compare" to determine ordering
fun heap_create size
  let heap         dict size
  let heap["size"] 0
  return heap
endfun

fun heap_insert heap elem
  fun sift_up heap index
    while (index - 1) / 2 >= 0
      let parent (index - 1) / 2
      if compare heap[parent] heap[index] > 0
        let tmp          heap[parent]
        let heap[parent] heap[index]
        let heap[index]  tmp
        let index        parent
      else
        break
      endif
    endwhile
  endfun
  let index       heap["size"]++
  let heap[index] elem
  sift_up heap index
endfun

fun heap_poll heap
  fun sift_down heap index
    while index * 2 + 1 < heap["size"]
      let child index * 2 + 1
      if child + 1 < heap["size"]
        if compare heap[child] heap[child + 1] > 0
          child++
        endif
      endif
      if compare heap[index] heap[child] > 0
        let tmp         heap[index]
        let heap[index] heap[child]
        let heap[child] tmp
        let index       child
      else
        break
      endif
    endwhile
  endfun
  if heap["size"] > 0
    let index   --heap["size"]
    let elem    heap[0]
    let heap[0] heap[index]
    sift_down heap 0
    return elem
  else
    println "Heap is empty!"
    return 0
  endif
endfun

endif # UTIL_HEXI
