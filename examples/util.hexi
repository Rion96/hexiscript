# hexiscript util functions
if catch UTIL_HEXI # Like #ifndef in C

# Consts
define UNDEFINED UTIL_HEXI # Use to delete functions/definions
define UTIL_HEXI true
define NEWLINE   "\n"
define null      0
define pi        3.141592654
define e         2.718281828
define stdin     "/dev/stdin"
define stdout    "/dev/stdout"
define stderr    "/dev/stderr"
define int       "int"
define str       "str"
define char      "char"
define bool      "bool"
define float     "float"

fun assertnot a s; if a; println "Assert_Error Message: " + s; throw Assert_Error; endif; endfun
fun assert a s; assertnot (!a) s; endfun

fun sleep f
  assertnot (catch (tonum f)) "sleep: NaN"
  run "sleep " + f
endfun

fun open_append f
  assert (f is str) "open_append: file name must be string!"
  define out ""
  define s   ""
  define i   openin f
  if (catch i); return i; endif
  while !(catch (let s read str i))
    let out (out + s + NEWLINE)
  endwhile
  close i
  let f openout f
  if (catch f); return f; endif
  write out f
  return f
endfun

fun fprint f s
  assert (f is str) "fprint: file name must be string!"
  let f openout f
  assertnot (catch f) "fprint: Could not open file!"
  write s f
  close f
endfun
fun fprintln f s; fprint f s; println ""; endfun

fun to_upper s
  # Generally you don't need to be so careful, but since 'util.hexi' is intended
  # to be used as a library, we don't know what functions the user has defined.
  # Therefore it's best to overwrite any potential functions that share names with
  # local variables we intend to use with 'define' (This is not necessary for the 
  # function's arguments, as those overwrite function names automatically).
  define out ""
  define i   0
  for ; i < len s; i++
    if s[i] >= 'a' && s[i] <= 'z'
      let out (out + tochar (s[i] - 32))
    else
      let out (out + s[i])
    endif
  endfor
  return out
endfun

fun to_lower s
  define out ""
  define i   0
  for ; i < len s; i++
    if s[i] >= 'A' && s[i] <= 'Z'
      let out (out + tochar (s[i] + 32))
    else
      let out (out + s[i])
    endif
  endfor
  return out
endfun

fun toint s
  let s tonum s
  if catch s; return s; endif
  return floor s
endfun

fun tofloat s
  let s tonum s
  if catch s; return s; endif
  return s + 0.
endfun

fun string_filter s elem
  assert (elem is char) "string_filter: elem must be char!"
  define out ""
  define i   0
  for ; i < len s; i++
    if s[i] != elem
      let out (out + s[i])
    endif
  endfor
  return out
endfun

# Like string_filter but only filters start and end of string
fun string_trim s delim
  assert (delim is char) "string_trim: delim must be char!"
  define out ""
  define i   0
  define j   len s - 1
  for ; i < len s - 1; i++
    if s[i] != delim; break; endif
  endfor
  for ; j >= 0; j--
    if s[j] != delim; break; endif
  endfor
  for ; i <= j; i++
    let out (out + s[i])
  endfor
  return out
endfun

fun string_compare a b
  fun min a b; if b < a; return b else return a; endif; endfun
  define min_l min (len a) (len b)
  define i     0
  for ; i < min_l; i++
    if a[i] != b[i]; return a[i] - b[i]; endif
  endfor
  return len a - len b
endfun

fun string_split s delim
  if len s = 0; return arr 0; endif
  define i   0
  define j   0
  define ret dict len s / 2
  let ret[0] ""
  for ; i < len s; i++
    if s[i] = delim
      if len ret[j] > 0
        let ret[++j] ""
      endif
      continue
    endif
    let ret[j] (ret[j] + s[i])
  endfor
  return ret
endfun

fun string_sub s from to
  assert (0 <= from && from <= to && to <= len s) ("string_sub: from=" + from + ", to=" + to)
  define ret ""
  define i   from
  for ; i < to; i++
    let ret (ret + s[i])
  endfor
  return ret
endfun

fun nat_order a b
  if a > b
    return 1
  elif a < b
    return (-1)
  else
    return 0
  endif
endfun

fun rev_order a b
  if a > b
    return (-1)
  elif a < b
    return 1
  else
    return 0
  endif
endfun

# Overwrite compare for general types
fun compare a b; return nat_order a b; endfun

fun min x y; if compare y x < 0; return y; else return x; endif; endfun

fun max x y; if compare x y < 0; return y; else return x; endif; endfun

fun dict_copy d
  assert (d is dict) "dict_copy: arg not dict!"
  define i   0
  define k   keys d
  define cpy dict len d
  for ; i < len d; i++
    let cpy[k[i]] d[k[i]]
  endfor
  return cpy
endfun

fun dict_print d
  assert (d is dict) "dict_print: d not dict!"
  define i 0
  define k keys d
  for ; i < len d; i++
    print k[i] + "\t: "
    println d[k[i]]
  endfor
endfun

# Array functions
# Most array functions work with dicts as well
fun array_copy a
  define i   0
  define cpy arr len a
  for ; i < len a; i++
    let cpy[i] a[i]
  endfor
  return cpy
endfun

fun array_filter a elem
  define i   0
  define j   0
  define out dict len a
  for ; i < len a; i++
    if compare a[i] elem != 0
      let out[j++] a[i]
    endif
  endfor
  return array_copy out
endfun

fun array_fill a elem
  define i 0
  for ; i < len a; i++
    let a[i] elem
  endfor
endfun

fun array_print a
  define i 0
  define n len a - 1
  if n < 0
    print "{}"
  else
    print "{"
    for ; i < n; i++
      print tostr a[i] + ", "
    endfor
    print tostr a[n] + "}"
  endif
endfun
fun array_println a; array_print a; println ""; endfun

fun array_sort h
  let h array_copy h
  fun sift_down h n index
    define child UNDEFINED
    while index * 2 + 1 < n
      let child index * 2 + 1
      if child + 1 < n
        if compare h[child] h[child + 1] < 0
          child++
        endif
      endif
      if compare h[index] h[child] < 0
        define tmp    h[index]
        let h[index]  h[child]
        let h[child]  tmp
        let index     child
      else
        break
      endif
    endwhile
  endfun
  # Initialize as heap
  define n     len h
  define i     n / 2 - 1
  for ; i >= 0; i--
    sift_down h n i
  endfor
  # Poll elements until empty
  while n > 0
    let tmp  h[0]
    let h[0] h[--n]
    let h[n] tmp
    sift_down h n 0
  endwhile
  return h
endfun

fun array_concat a b
  define c arr len a + len b
  define i 0
  for ; i < len a; i++
    let c[i] a[i]
  endfor
  for ; i < len a + len b; i++
    let c[i] b[i - len a]
  endfor
  return c
endfun

# Subset operation (Assumes sortedness!)
fun array_subset a b
  if len b < len a; return false; endif
  define i 0; define j 0
  for ; i < len a; i++
    let j 0
    while compare b[j] a[i] < 0; j++; endwhile
    if compare b[j] a[i] != 0; return false; endif
  endfor
  return true
endfun

# Intersect operation (Assumes sortedness!)
fun array_intersect a b
  if len a = 0 || len b = 0; return arr 0; endif
  define res dict len a + len b
  define x   0
  define y   0
  define r   0
  while x < len a && y < len b
    if   compare a[x] b[y] < 0; x++
    elif compare b[y] a[x] < 0; y++
    elif a[x] = b[y]
      let res[r++] a[x]
      if x < len a; x++; else y++; endif
    else
      break
    endif
  endwhile
  return array_copy res
endfun

fun folder acc x; return acc + x; endfun
fun array_fold acc a
  define i 0
  for ; i < len a; i++
    let acc (folder acc a[i])
  endfor
  return acc
endfun

fun array_sum a
  fun folder acc x; return acc + x; endfun
  return array_fold 0 a;
endfun

fun mapper x; return toint x; endfun
fun array_map a
  let a array_copy a
  define i 0
  for ; i < len a; i++
    let a[i] (mapper a[i])
  endfor
  return a
endfun

fun array_create l x
  define a arr l
  array_fill a x
  return a
endfun

fun matrix_create x y
  fun mapper x; return arr x; endfun
  return array_map array_create x y
endfun

fun matrix_print a
  define i 0
  for ; i < len a; i++
    array_println a[i]
  endfor
endfun

# Fast way to initialize arrays
fun array_quick s delim type
  define res array_copy string_split s delim
  if type = int
    fun mapper x; return toint x; endfun
    let res array_map res
  elif type = bool
    fun mapper x; if x = "true"; return true; else return false; endif; endfun
    let res array_map res
  elif type = float
    fun mapper x; return tonum x; endfun
    let res array_map res
  elif type = char
    fun mapper x; return tochar x; endfun
    let res array_map res
  endif
  return res
endfun

fun array_member a x
  define i 0
  for ; i < len a; i++
    if a[i] = x; return true; endif
  endfor
  return false
endfun

fun array_sub a from to
  assert (0 <= from && from <= to && to <= len a) ("array_sub: from=" + from + ", to=" + to)
  define ret arr (to - from)
  define i   from
  for ; i < to; i++
    let ret[i - from] a[i]
  endfor
  return ret
endfun

fun array_interval from to
  assert (from <= to) ("array_interval: from=" + from + ", to=" + to)
  define a arr (to - from)
  define i 0
  for ; i < to - from; i++
    let a[i] (i + from)
  endfor
  return a
endfun

fun argcond acc x; return compare x acc < 0; endfun
fun array_findarg a
  assert (0 < len a) "array_findarg: Array is empty!"
  define arg 0
  define acc a[0]
  define i   1
  for ; i < len a; i++
    if argcond acc a[i]
      let arg i; let acc a[i]
    endif
  endfor
  return arg
endfun

fun array_minarg a
  fun argcond acc x; return compare x acc < 0; endfun
  return array_findarg a
endfun

fun array_maxarg a
  fun argcond acc x; return 0 < compare x acc; endfun
  return array_findarg a
endfun

# Heap functions
# Uses function "compare" to determine ordering
fun heap_create size
  define heap      dict size + 2
  let heap["size"] 0
  return heap
endfun

fun heap_push heap elem
  assert (heap is dict) "heap_push: Not a heap"
  fun sift_up heap index
    while (index - 1) / 2 >= 0
      define parent (index - 1) / 2
      if compare heap[parent] heap[index] > 0
        define tmp       heap[parent]
        let heap[parent] heap[index]
        let heap[index]  tmp
        let index        parent
      else
        break
      endif
    endwhile
  endfun
  define index    heap["size"]++
  let heap[index] elem
  sift_up heap index
endfun

fun heap_pop heap
  assert (heap is dict) "heap_pop: Not a heap!"
  fun sift_down heap index
    define child UNDEFINED
    while index * 2 + 1 < heap["size"]
      let child index * 2 + 1
      if child + 1 < heap["size"]
        if compare heap[child] heap[child + 1] > 0
          child++
        endif
      endif
      if compare heap[index] heap[child] > 0
        define tmp      heap[index]
        let heap[index] heap[child]
        let heap[child] tmp
        let index       child
      else
        break
      endif
    endwhile
  endfun
  if heap["size"] > 0
    define index --heap["size"]
    define elem  heap[0]
    let heap[0]  heap[index]
    sift_down heap 0
    return elem
  else
    return null
  endif
endfun

fun heap_poll heap
  assert (heap is dict) "heap_poll: Not a heap!"
  if 0 < heap["size"]; return heap[0]; endif
  return null
endfun

fun heap_size heap
  assert (heap is dict) "heap_size: Not a heap!"
  return heap["size"]
endfun

# Unbalanced Binary Tree
fun tree_create init
  define t arr  3
  let t[0] init
  let t[1] null
  let t[2] null
  return t
endfun
fun set_create init; return tree_create init; endfun

define set_empty null

# Turns tree into (sorted) array (inorder)
fun tree_flatten t
  define elem 0; define left 1; define right 2
  if t = null; return arr 0
  else
    define e array_create 1 t[elem]
    return array_concat (array_concat (tree_flatten t[left]) e) tree_flatten t[right]
  endif
endfun
fun array_of_tree t; return tree_flatten t; endfun
fun array_of_set t; return tree_flatten t; endfun

# Turns array into tree (Assumes sortedness, no duplicates!)
fun tree_of_array_unsafe a
  define elem 0; define left 1; define right 2
  fun recurse a from to
    if to < from; return null; endif
    if to = from; return tree_create a[from]; endif
    define pivot from + (to - from) / 2
    define t     tree_create a[pivot]
    let t[left]  recurse a from (pivot - 1)
    let t[right] recurse a (pivot + 1) to
    return t
  endfun
  if len a = 0; return null; endif
  return recurse a 0 (len a - 1)
endfun
fun set_of_array_unsafe a; return tree_of_array_unsafe a; endfun

# Slower, but works on all arrays
fun tree_of_array a
  if len a = 0; return null; endif
  define ret tree_create a[0]
  define i   1
  for ; i < len a; i++
    tree_insert ret a[i]
  endfor
  return tree_balance ret
endfun
fun set_of_array a; return tree_of_array a; endfun

# Creates a balanced copy of t
fun tree_balance t; return tree_of_array_unsafe (tree_flatten t); endfun
fun set_copy t; return tree_balance t; endfun

fun tree_insert t e
  if t = null; return tree_create e; endif
  define elem 0; define left 1; define right 2
  if 0 < compare t[elem] e
    if t[left] = null
      let t[left] (tree_create e)
    else
      tree_insert t[left] e
    endif
  elif compare t[elem] e < 0
    if t[right] = null
      let t[right] (tree_create e)
    else
      tree_insert t[right] e
    endif
  endif
  return t
endfun
fun set_insert t e; return tree_insert t e; endfun

fun tree_find t e
  if t = null; return null; endif
  define elem 0; define left 1; define right 2
  if 0 < compare t[elem] e
    return tree_find t[left] e
  elif compare t[elem] e < 0
    return tree_find t[right] e
  else
    return t
  endif
endfun
fun set_member t e; return null != tree_find t e; endfun

fun tree_min t
  define elem 0; define left 1; define right 2
  if t = null; return null
  elif t[left] = null; return t[elem]
  else return tree_min t[left]; endif
endfun
fun set_min t; return tree_min t; endfun

fun tree_max t
  define elem 0; define left 1; define right 2
  if t = null; return null
  elif t[right] = null; return t[elem]
  else return tree_max t[right]; endif
endfun
fun set_max t; return tree_max t; endfun

fun tree_delete t e
  define elem 0; define left 1; define right 2
  if t = null; return null; endif
  if 0 < compare t[elem] e
    let t[left] tree_delete t[left] e
  elif compare t[elem] e < 0
    let t[right]  tree_delete t[right] e
  else
    if t[right] = null; return t[left]
    else
      define min_t tree_min t[right]
      let t[right] tree_delete t[right] min_t
      let t[elem]  min_t
    endif
  endif
  return t
endfun
fun set_delete t e; return tree_delete t e; endfun

fun tree_size t
  define elem 0; define left 1; define right 2
  if t = null; return 0
  else return tree_size t[left] + 1 + tree_size t[right]; endif
endfun
fun set_size t; return tree_size t; endfun
fun card t; return tree_size t; endfun

fun tree_print t; array_print tree_flatten t; endfun
fun tree_println t; array_println tree_flatten t; endfun
fun set_print t; tree_print t; endfun
fun set_println t; tree_println t; endfun

fun tree_join a b
  if b = null; return a; endif
  if a = null; return b; endif
  # Rebalance the larger tree, flatten the smaller
  if len a < len b
    define t tree_balance b
    let a tree_flatten a
  else
    define t tree_balance a
    let a tree_flatten b
  endif
  define i 0
  for ; i < len a; i++
    tree_insert t a[i]
  endfor
  return t
endfun
fun set_union a b; return tree_join a b; endfun

fun tree_subset a b; return array_subset (tree_flatten a) (tree_flatten b); endfun
fun set_subset a b; return tree_subset a b; endfun
fun tree_intersect a b; return tree_of_array_unsafe array_intersect (tree_flatten a) (tree_flatten b); endfun
fun set_intersect a b; return tree_intersect a b; endfun

fun tree_delete_array t a
  if len a = 0; return t; endif
  define i 0
  for ; i < len a; i++
    let t tree_delete t a[i]
  endfor
  return t
endfun

fun tree_delete_tree a b; return tree_delete_array a (tree_flatten b); endfun
fun set_minus a b; return tree_delete_tree a b; endfun

fun tree_sum t
  define elem 0; define left 1; define right 2
  if t = null; return 0; endif
  return tree_sum t[left] + t[elem] + tree_sum t[right]
endfun
fun set_sum t; return tree_sum t; endfun

# Compare basic sets using string_compare
fun set_compare a b
  fun folder acc x; return acc + x; endfun
  let a array_of_set a
  let b array_of_set b
  let a (array_fold "" a)
  let b (array_fold "" b)
  return string_compare a b
endfun

# Does not preserve ordering!
fun tree_map_unsafe t
  define elem 0; define left 1; define right 2
  if t = null; return null; endif
  let t[elem]  mapper t[elem]
  let t[left]  tree_map_unsafe t[left]
  let t[right] tree_map_unsafe t[right]
  return t
endfun
fun set_map_unsafe t; return tree_map_unsafe t; endfun

# Simple function compositions
fun tree_quick s delim type; return tree_of_array (array_quick s delim type); endfun
fun set_quick  s delim type; return tree_quick s delim type; endfun
fun tree_interval from to; return tree_of_array_unsafe (array_interval from to); endfun
fun set_interval  from to; return tree_interval from to; endfun
fun tree_fold acc t; return array_fold acc (array_of_tree t); endfun
fun set_fold  acc t; return tree_fold acc t; endfun
fun tree_map      t; return tree_of_array (array_map (array_of_tree t)); endfun
fun set_map       t; return tree_map t; endfun

# Split string using multiple delimiters (char set!)
fun string_splits s delims
  if len s = 0; return arr 0; endif
  define i   0
  define j   0
  define ret dict len s / 2
  let ret[0] ""
  for let i 0; i < len s; i++
    if set_member delims s[i]
      if len ret[j] > 0
        let ret[++j] ""
      endif
      continue
    endif
    let ret[j] (ret[j] + s[i])
  endfor
  return ret
endfun

# Linked List
fun list_create init
  define l arr 2
  let l[0] init
  let l[1] null
  return l
endfun
fun stack_create init; return list_create init; endfun

fun list_prepend l e
  let e    list_create e
  let e[1] l
  return e
endfun
fun stack_push s e; return list_prepend s e; endfun

fun list_push l i e
  for ; l != null && 0 < i; i--
    let l l[1]
  endfor
  if l != null
    define tmp l[1]
    let l[1] list_create e
    let l[1][1] tmp
  endif
endfun

fun list_append l e
  if l[1] = null; let l[1] (list_create e)
  else list_append l[1] e; endif
endfun

fun list_head l
  if l = null; return null; endif
  return l[0]
endfun
fun stack_poll s; return list_head s; endfun

fun list_poll l i
  if l = null; return null; endif
  if i <= 0; return l[0]; endif
  return list_poll l[1] (i - 1)
endfun

fun list_pop l i
  if l = null; return null; endif
  if i <= 0; return l[1]; endif
  let l[1] list_pop l[1] (i - 1)
  return l
endfun

fun stack_pop s
  if s = null; return null; endif
  return s[1]
endfun

fun list_size l
  if l = null; return 0; endif
  return 1 + list_size l[1]
endfun
fun stack_size s; return list_size s; endfun

fun array_of_list l
  if l = null; return arr 0; endif
  define e array_create 1 l[0]
  return array_concat e (array_of_list l[1])
endfun

fun list_of_array a
  if len a = 0; return null; endif
  define la len a
  define l  null
  while 0 < la
    let l list_prepend l a[--la]
  endwhile
  return l
endfun

# Simple function compositions
fun list_quick  l delim type; return list_of_array (array_quick l delim type); endfun
fun stack_quick s delim type; return list_quick s delim type; endfun
fun list_print     l; array_print   (array_of_list l); endfun
fun list_println   l; array_println (array_of_list l); endfun
fun stack_print    s; list_print s; endfun
fun stack_println  s; list_println s; endfun
fun list_map       l; return list_of_array (array_map (array_of_list l)); endfun
fun stack_map      s; return list_map s; endfun
fun list_fold  acc l; return array_fold acc (array_of_list l); endfun
fun stack_fold acc s; return list_fold acc s; endfun

# Knuth-Morris-Pratt algorithm
# Based on https://en.wikipedia.org/wiki/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm
fun kmp s w
  if len s < len w; return arr 0; endif
  fun table w
    define pos 1
    define cnd 0
    define t   arr len w + 1
    let t[0] (-1)
    while pos < len w
      if w[pos] = w[cnd]
        let t[pos] t[cnd]
      else
        let t[pos] cnd
        while cnd >= 0 && w[pos] != w[cnd]
          let cnd t[cnd]
        endwhile
      endif
      pos++; cnd++
    endwhile
    let t[pos] cnd
    return t
  endfun
  define out dict len s / len w
  define t   table w
  define j   0
  define k   0

  while j < len s
    if w[k] = s[j]
      j++; k++
      if k = len w
        let out[len out] j - k
        let k t[k]
      endif
    else
      let k t[k]
      if k < 0
        j++; k++
      endif
    endif
  endwhile
  return out
endfun

endif # UTIL_HEXI
